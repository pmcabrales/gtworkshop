apply plugin: "java"
apply plugin: "java-library"
apply plugin: "idea"
apply plugin: "com.github.spacialcircumstances.gradle-cucumber-reporting"

sourceCompatibility = JavaVersion.VERSION_11

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'

    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

test {
    testLogging {
        exceptionFormat 'full'
        events 'started', 'skipped', 'passed', 'failed'
        showStandardStreams true
    }
    outputs.upToDateWhen {false}
}

sourceSets.main.java.srcDirs = ['actions', 'datacreation', 'suites', 'tests']
sourceSets.main.resources.srcDirs = ['actions', 'datacreation', 'suites', 'tests']
sourceSets.test.java.srcDirs = ['actions', 'datacreation', 'suites', 'tests']
sourceSets.test.resources.srcDirs = ['actions', 'datacreation', 'suites', 'tests']

task runSmokeTests(description: 'Smoke Test - healthcheck before running whole functional test suite.') {
    subprojects.each {
        dependsOn it.tasks.getByName('test')
    }
}

/*
* This is for creating the fat Jar distribution.
*/
task createApiJar(type: Jar) {
    archiveFileName= project.name + '.jar'

    from (project(':api').projectDir) {
        project.logger.info('Building API Jar > Adding karate-config and logback-test files.')

        include 'karate-config.js'
    }

    from (configurations.runtimeClasspath.findAll{
        it.name.endsWith('jar')
    }.collect { it.isDirectory() ? it : zipTree(it) }){
        exclude ("log4j.properties")
        exclude 'META-INF/*.RSA'
        exclude 'META-INF/*.SF'
        exclude 'META-INF/*.DSA'
        exclude 'META-INF', 'META-INF/**'
        exclude 'license','license/**'
    }
    with jar
}

List<Task> filterTasks = project.allprojects.collectMany {
    Project p -> p.tasks.findAll {
        Task t -> t.name.startsWith('createApiJar')
    }
}
filterTasks.each { Task t -> t.configure { zip64 = true } }

// Gradle task to run custom test suite via test suite name as a System Property
// Ex: gradle runTestSuite -DtestSuite=CucumberTestsRunner
task runTestSuite(type: Test) {
    def testSuiteToRun = System.getProperty("testSuite")
    include "${testSuiteToRun}.class"
}
runTestSuite.onlyIf { System.getProperty("testSuite") != null}

cucumberReports {
    outputDir = file('../reports/apidevtests')
    buildId = '0'
    reports = files("../reports/apidevtests/Cucumber.json")
}

/* Gradle task to modify Junit XML report with SUT log correlation info. */
task (updateReportWithDDTag, type: JavaExec) {
    dependsOn 'classes'
    dependsOn 'runTestSuite'
    main = 'gw.gtapi.util.report.ISLogCorrelationReportUtil'
    String userDir = System.getProperty("user.dir")
    String cucumberReportLoc = '/reports/apidevtests/'
    String karateLogLoc = '/api/target/'

    args = [userDir, cucumberReportLoc, karateLogLoc]
    classpath = sourceSets.main.runtimeClasspath
    description = "Run the LogCorrelationReportUtil"
}